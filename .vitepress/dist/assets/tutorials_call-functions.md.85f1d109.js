import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.36bc40e2.js";const g=JSON.parse('{"title":"Usare un servizio","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/call-functions.md","filePath":"tutorials/call-functions.md"}'),e={name:"tutorials/call-functions.md"},l=o(`<h1 id="usare-un-servizio" tabindex="-1">Usare un servizio <a class="header-anchor" href="#usare-un-servizio" aria-label="Permalink to &quot;Usare un servizio&quot;">​</a></h1><p>Per usare un servizio OData esistono vari modi. Ognuno di questi fa riferimento al concetto di <em>binding</em>. In parole povere, si collega un endpoint del server ad un elemento XML oppure ad un oggetto JS.</p><h2 id="dichiarazione-modello-odata-nel-manifest" tabindex="-1">Dichiarazione modello OData nel manifest <a class="header-anchor" href="#dichiarazione-modello-odata-nel-manifest" aria-label="Permalink to &quot;Dichiarazione modello OData nel manifest&quot;">​</a></h2><p>...</p><h2 id="ottenere-una-risorsa" tabindex="-1">Ottenere una risorsa <a class="header-anchor" href="#ottenere-una-risorsa" aria-label="Permalink to &quot;Ottenere una risorsa&quot;">​</a></h2><p>Per ottenere una risorsa si fa riferimento ad essa tramite un <em>path</em>. In questo modo possiamo creare il binding.</p><p>Ad esempio supponiamo di voler ottenere tutti i record relativi ad una entity chiamata <em>Users</em> e volerli stampare in una tabella. Abbiamo due possibilità:</p><h3 id="_1-binding-diretto-alla-tabella" tabindex="-1">1) binding diretto alla tabella <a class="header-anchor" href="#_1-binding-diretto-alla-tabella" aria-label="Permalink to &quot;1) binding diretto alla tabella&quot;">​</a></h3><p>Su ogni elemento che supporta l&#39;aggregation <code>items</code> è possibile effetuare il binding di una lista di oggetti. Ad esempio:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">Table</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{odata&gt;/Users}&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">Table</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">Table</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{odata&gt;/Users}&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">Table</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_2-binding-indiretto-con-js" tabindex="-1">2) binding indiretto con JS <a class="header-anchor" href="#_2-binding-indiretto-con-js" aria-label="Permalink to &quot;2) binding indiretto con JS&quot;">​</a></h3><p>Supponendo che il nostro model abbia nome <code>odata</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> odataModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getView</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getModel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;odata&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> binding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> odataModel.</span><span style="color:#B392F0;">bindList</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/Users&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> contexts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> binding.</span><span style="color:#B392F0;">requestContexts</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contexts.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">getObject</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> odataModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getView</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getModel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;odata&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> binding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> odataModel.</span><span style="color:#6F42C1;">bindList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/Users&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> contexts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> binding.</span><span style="color:#6F42C1;">requestContexts</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contexts.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getObject</span><span style="color:#24292E;">());</span></span></code></pre></div><p>Qui nella variabile <code>users</code> avremo la lista di utenti in forma di array di oggetti.</p><div class="danger custom-block"><p class="custom-block-title">Occhio al contesto</p><p>Attenzione ad usare tutto ciò in un contesto <code>async</code>, dato che nella terza riga viene usato il costrutto <code>await</code></p></div>`,15),t=[l];function p(r,i,c,d,E,y){return a(),n("div",null,t)}const h=s(e,[["render",p]]);export{g as __pageData,h as default};
